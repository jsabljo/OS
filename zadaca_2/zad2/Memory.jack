/**
 * Memory operations library.
 */ 
class Memory
{
    static Array ram;
    static Array freeList;
    
    /** Initializes memory parameters. */
    function void init()
    {
        let ram = 0;
        
        // set heap and free list to 2048 (heap top)
        let freeList = 2048;
        
        // initial values
        let freeList[0] = 0;     // no next block at start
        let freeList[1] = 14334; // initial block length, 16384 - 2048 - 1
        
        return;
    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address)
    {
        return ram[address];
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value)
    {
        let ram[address] = value;
        return;
    }

    /** finds and allocates from the heap a memory block of the 
     *  specified size and returns a reference to its base address. */
    function int alloc(int size)
    {
        var int curr, next, len, new;
        var boolean break;
        let break = true;
        let curr = freeList;

        // iterate through all blocks

        while (~(curr = 0))
        {
            let next = ram[curr];
            let len = ram[curr + 1];

            // check if current block is large enough
            if (~(len < (size + 2))) // len >= size + 2
            {
                // the block is large enough, use it (first fit) 
                
                let ram[curr + 1] = len - size - 2;
                
                let new = curr + len - size;
                let ram[new] = 0;
                let ram[new + 1] = size;
                
                // return first element
                return new + 2;
            }            

            let curr = next;

            if ((curr = 0) & break){
                let break = false;
                do Memory.defrag();
                let curr = freeList;
            }

        }
        return freeList;
    }

    
    /** De-allocates the given object and frees its space. */
    function void deAlloc(int object)
    {
        var int curr, next;
        let curr = freeList;
        
        // iterate through all blocks
        while (~(curr = 0))
        {
            let next = ram[curr];
            if (next = 0){
                let ram[curr] = object - 2;
                let ram[object - 2] = 0;
                return;
            }
            let curr = next;
            
        }
        return;
    }
 
    
    function void defrag()
    {
        var int curr, next, next_prev, prev_curr, pom, i, pom2;

        let curr = freeList;
        let prev_curr = curr;
        while(~(curr = 0)){

            let next = ram[curr];
            let next_prev = curr;
   
            while(~(next = 0)){
     
                if(next < curr){
                    if(~(next_prev = curr)){
                        let ram[next_prev] = curr;
                    }
                    if (prev_curr = curr){
                        let pom = ram[next];
                        let ram[next] = ram[curr];
                        let ram[curr] = pom;
                    }else{
                        let ram[prev_curr] = next;
                        let pom = ram[next];
                        if ( ram[curr] = next){
                            let ram[next] = curr;
                        } else {
                            let ram[next] = ram[curr];
                        }
                        let ram[curr] = pom;
 
                    }
                    let pom2 = curr;
                    let curr = next;
                    let next_prev = pom2;
                    let next = ram[pom2];
    
                } else {

                    let next_prev = next;
                    let next = ram[next]; 
                } 
                     
            }
            let prev_curr = curr;
            let curr = ram[curr];
        }

  
        let curr = freeList;
        let next = ram[curr];

        while(~(next = 0))
        {
            if((curr + ram[curr + 1] + 2) = next)
            {
                let ram[curr + 1] = ram[curr + 1] + ram[next + 1] + 2;
                let ram[curr] = ram[next];
                let next = ram[curr];
            } else {
                let curr = next;
                let next = ram[curr];
            }
     
        }

        return;
    }
    
    
    

    function void memcpy(int izvor, int odrediste, int d)
    {
        var int i;
        let i = 0;

        while (i < d){

            let ram[odrediste + i] = ram[izvor + i];

            let i = i + 1;
        }

        return ;
    }  


    
}